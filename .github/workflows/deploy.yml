name: first-springboot2

on:
  push:
    branches:
      - master # (1) Github Action의 트리거 브랜치를 지정
  workflow_dispatch: # (2) 브랜치 push 이벤트외에, 수동으로 실행하는 것도 가능하게 만드는 옵션

jobs:
  build:
    runs-on: ubuntu-latest # (3) 해당 Github Action 스크립트가 작동될 OS 환경을 지정합니다.

    steps:
      - name: Checkout
        uses: actions/checkout@v2 # (4) 프로젝트 코드를 checkout 합니다.

      - name: Set up JDK 11
        uses: actions/setup-java@v1 # (5) Github Action이 실행될 OS에 Java를 설치합니다.
        with:
          java-version: 11

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew # (6) gradle wrapper를 실행할 수 있도록 실행 권한 (+x)을 줍니다.
        shell: bash

      - name: Build with Gradle
        run: ./gradlew clean build # (7) gradle wrapper를 통해 해당 프로젝트를 build 합니다.
        shell: bash

      - name: Get current time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss # (1)
          utcOffset: "+09:00" # 해당 action의 기준이 UTC이기 때문에 한국시간이 KST를 맞추기 위해서는 +9시간이 필요하여 offset을 추가

      - name: Show Current Time # get-current-time 에서 지정한 포맷대로 현재 시간을 노출
        run: echo "CurrentTime=${{steps.current-time.outputs.formattedTime}}" # (2)
        shell: bash

      - name: Generate deployment package # (1) Gradle Build를 통해 만들어진 jar 파일을 Beanstalk에 배포하기 위한 zip 파일로 만들어줄 스크립트 입니다.
        run: |
          mkdir -p deploy
          cp build/libs/*.jar deploy/application.jar
          cp Procfile deploy/Procfile
          cp -r .ebextensions deploy/.ebextensions
          cp -r .platform deploy/.platform
          cd deploy && zip -r deploy.zip .

      #빌드가 끝나면 해당 배포 Jar의 파일명을 application.jar로 교체합니다.
      #매 빌드때마다 jar의 파일명이 버전과 타임스탬프로 파일명이 교체됩니다.
      #그래서 Beanstalk 배포시에 매번 달라질 파일명을 찾아내기 보다는 하나로 통일해서 사용하도록 변경하였습니다.
      #application.jar 외에 3개의 파일/디렉토리 Procfile, .ebextensions, .platform 도 함께 zip에 포함시킵니다.


      - name: Deploy to EB # (2) Beanstalk 플러그인을 사용하는 코드.
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}  # 미리 생성해둔 IAM 인증키를 사용합니다.
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: springboot
          environment_name: Springboot-env
          version_label: github-action-${{steps.current-time.outputs.formattedTime}}
          region: us-northeast-2
          deployment_package: deploy/deploy.zip


